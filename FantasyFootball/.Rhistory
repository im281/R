finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
ncol(finalfinalexp)
ncol(finalfinal)
finalfinalexp[is.na(finalfinalexp)] <- 0
write.csv(finalfinalexp,'W3_Thurs_Mon_Exp4.csv')
UploadToMLStudio(finalfinalexp,'W3_Thurs_Mon_Exp4.csv')
csvFile <- 'W4_Thurs_Mon_FullModel_P.csv'
data <- data.table(read.csv(csvFile))
d <- OptimizeFBLineup1(data)
head(data)
d <- OptimizeFBLineup(data)
d <- OptimizeFBLineup1(data)
View(data)
d <- OptimizeFBLineup1(data)
nrow(final)
nrow(final)
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
d <- OptimizeFBLineup1(data)
d <- OptimizeFBLineup1(data)
sol
sol[1]
sol[2]
opt
final$Pos
debugSource('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
final
experiment
View(experiment)
View(finalfinalexp)
View(finalfinal)
finalfinal$Pos
p$Pos
players$Pos
experiment$Pos
d <- OptimizeFBLineup(data)
d <- OptimizeFBLineup(data)
final$Pos
View(final)
experiment
View(experiment)
d <- OptimizeFBLineup1(data)
finalfinalexp
View(exp)
View(experiment)
View(final)
View(finaltableexp)
View(experiment)
View(experiment)
View(finaltable)
View(finaltableexp)
View(final)
test <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
View(test)
test <- finalfinalexp[which(finalfinalexp$Pos != 0))]
test <- finalfinalexp[which(finalfinalexp$Pos != 0)]
View(test)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
#Assign 0 to NAs
finalfinalexp[is.na(finalfinalexp)] <- 0
finalfinalexp <- finalfinalexp[which(finalfinalexp$Pos != 0)]
write.csv(finalfinalexp,'W3_Thurs_Mon_Exp5.csv')
UploadToMLStudio(finalfinalexp,'W3_Thurs_Mon_Exp5.csv')
finalfinalexp[is.na(finalfinalexp)] <- 0
finalfinalexp <- finalfinalexp[which(finalfinalexp$Pos != 0)]
finalfinalexp
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
test <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
setkey(final,Name,Week)
setkey(experiment,Name,Week)
finaltableexp <- merge(final,experiment,all.x = TRUE,allow.cartesian = TRUE)
names(finaltableexp)[names(finaltableexp)=="TeamID.x"] <- "TeamID"
setkey(finaltableexp,TeamID)
setkey(d,TeamID)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
test <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
View(finaltableexp)
test <- finalfinalexp[which(finalfinalexp$Pos != 'NA']
test <- finalfinalexp[which(finalfinalexp$Pos != 'NA')]
test
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
test <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
test <- finalfinalexp[which(!is.na(finalfinalexp$Pos.x))]
nrow(test)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
#remove poistions that are NA
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos.x))]
#Assign 0 to NAs
finalfinalexp[is.na(finalfinalexp)] <- 0
finalfinalexp <- finalfinalexp[which(finalfinalexp$Pos != 0)]
write.csv(finalfinalexp,'W3_Thurs_Mon_Exp6.csv')
UploadToMLStudio(finalfinalexp,'W3_Thurs_Mon_Exp6.csv')
finalfinalexp
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
nrow(finalfinalexp)
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos.x))]
nrow(finafinalexp)
nrow(finalfinalexp)
finalfinalexp[is.na(finalfinalexp)] <- 0
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
#remove poistions that are NA
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos.x))]
finalfinalexp[is.na(finalfinalexp)] <- 0
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
#remove poistions that are NA
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos.x))]
View(finalfinalexp)
d
#2016 run pass and total defense
runD16 <- data.table(read.csv('2016RunD.txt',sep = "\t"))
passD16 <- data.table(read.csv('2016PassD.txt',sep = "\t"))
totalD16 <- data.table(read.csv('2016TotalD.txt',sep ="\t"))
runandpassandtotal2015[,"Year"] <- 2016
#setkey
#merge 2015 stats to one table
runandpass2016 <- merge(runD16,passD16,by="Team")
d <- merge(runandpass2016 ,totalD16,by="Team")
setkey(final,Name,Week)
setkey(experiment,Name,Week)
finaltableexp <- merge(final,experiment,all.x = TRUE,allow.cartesian = TRUE)
names(finaltableexp)[names(finaltableexp)=="TeamID.x"] <- "TeamID"
setkey(finaltableexp,TeamID)
setkey(d,TeamID)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
d[,"TeamID"] <- 0
d <- AssignTeamIDsDefense(d)
setkey(final,Name,Week)
setkey(experiment,Name,Week)
finaltableexp <- merge(final,experiment,all.x = TRUE,allow.cartesian = TRUE)
names(finaltableexp)[names(finaltableexp)=="TeamID.x"] <- "TeamID"
setkey(finaltableexp,TeamID)
setkey(d,TeamID)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos.x))]
View(finaltableexp)
d
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
View(finaltableexp)
setkey(d,TeamID)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
View(finaltableexp)
View(finalfinalexp)
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos.x))]
View(finalfinalexp)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
View(finalfinalexp)
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
finalfinalexp[is.na(finalfinalexp)] <- 0
View(finalfinalexp)
write.csv(finalfinalexp,'W3_Thurs_Mon_Exp7.csv')
UploadToMLStudio(finalfinalexp,'W3_Thurs_Mon_Exp7.csv'
)
data <- data.table(read.csv(csvFile))
d <- OptimizeFBLineup(data)
path <- 'C:/Users/Owner/Source/Repos/R/FantasyFootball/Fanduel/FanDuel-NFL-2016-09-29-16456-players-W4-Thurs-Sun-list.csv'
t <- data.table(read.csv(path,stringsAsFactors = FALSE))
# remove injured players
t <- t[which(t$Injury.Indicator == "")]
idData<- data.table(read.csv('RotoguruPlayerIds.csv',stringsAsFactors = FALSE))
input <- ConvertFanduelCSV(t,idData)
input[,"TeamID"] <- 0
experiment <- AssignTeamIDs(input)
#setkey(experiment,'TeamID')
setkey(final,Name,Week)
setkey(experiment,Name,Week)
finaltableexp <- merge(final,experiment,all.x = TRUE,allow.cartesian = TRUE)
names(finaltableexp)[names(finaltableexp)=="TeamID.x"] <- "TeamID"
setkey(finaltableexp,TeamID)
setkey(d,TeamID)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
#remove poistions that are NA
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
#Assign 0 to NAs
finalfinalexp[is.na(finalfinalexp)] <- 0
write.csv(finalfinalexp,'W3_Thurs_Sun_Exp8.csv')
UploadToMLStudio(finalfinalexp,'W3_Thurs_Sun_Exp8.csv')
View(finalfinalexp)
path <- 'C:/Users/Owner/Source/Repos/R/FantasyFootball/Fanduel/FanDuel-NFL-2016-09-29-16456-players-W4-Thurs-Sun-list.csv'
t <- data.table(read.csv(path,stringsAsFactors = FALSE))
# remove injured players
t <- t[which(t$Injury.Indicator == "")]
idData<- data.table(read.csv('RotoguruPlayerIds.csv',stringsAsFactors = FALSE))
input <- ConvertFanduelCSV(t,idData)
input[,"TeamID"] <- 0
experiment <- AssignTeamIDs(input)
#setkey(experiment,'TeamID')
setkey(final,Name,Week)
setkey(experiment,Name,Week)
finaltableexp <- merge(final,experiment,all.x = TRUE,allow.cartesian = TRUE)
names(finaltableexp)[names(finaltableexp)=="TeamID.x"] <- "TeamID"
setkey(finaltableexp,TeamID)
setkey(d,TeamID)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
View(finalfinalexp)
names(finaltableexp)[names(finaltableexp)=="Pos.x"] <- "Pos"
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
names(finalfinaleexp)[names(finalfinaleexp)=="Pos.x"] <- "Pos"
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
names(finalfinaleexp)[names(finalfinaleexp)=="Pos.x"] <- "Pos"
names(finalfinaleexp)[names(finalfinalexp)=="Pos.x"] <- "Pos"
names(finalfinalexp)[names(finalfinalexp)=="Pos.x"] <- "Pos"
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
View(finalfinalexp)
finalfinalexp[is.na(finalfinalexp)] <- 0
path <- 'C:/Users/Owner/Source/Repos/R/FantasyFootball/Fanduel/FanDuel-NFL-2016-09-29-16456-players-W4-Thurs-Sun-list.csv'
t <- data.table(read.csv(path,stringsAsFactors = FALSE))
# remove injured players
t <- t[which(t$Injury.Indicator == "")]
idData<- data.table(read.csv('RotoguruPlayerIds.csv',stringsAsFactors = FALSE))
input <- ConvertFanduelCSV(t,idData)
input[,"TeamID"] <- 0
experiment <- AssignTeamIDs(input)
#setkey(experiment,'TeamID')
setkey(final,Name,Week)
setkey(experiment,Name,Week)
finaltableexp <- merge(final,experiment,all.x = TRUE,allow.cartesian = TRUE)
names(finaltableexp)[names(finaltableexp)=="TeamID.x"] <- "TeamID"
setkey(finaltableexp,TeamID)
setkey(d,TeamID)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
head(d)
View(finalfinalexp)
names(finalfinalexp)[names(finalfinalexp)=="Pos.x"] <- "Pos"
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
finalfinalexp
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
finalfinalexp[is.na(finalfinalexp)] <- 0
View(finalfinalexp)
View(finaltableexp)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
View(finalfinalexp)
runD16 <- data.table(read.csv('2016RunD.txt',sep = "\t"))
passD16 <- data.table(read.csv('2016PassD.txt',sep = "\t"))
totalD16 <- data.table(read.csv('2016TotalD.txt',sep ="\t"))
runandpassandtotal2015[,"Year"] <- 2016
#setkey
#merge 2015 stats to one table
runandpass2016 <- merge(runD16,passD16,by="Team")
d <- merge(runandpass2016 ,totalD16,by="Team")
d[,"TeamID"] <- 0
d <- AssignTeamIDsDefense(d)
setkey(d,TeamID)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
View(finalfinalexp)
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
finalfinalexp[is.na(finalfinalexp)] <- 0
write.csv(finalfinalexp,'W3_Thurs_Sun_Exp9.csv')
UploadToMLStudio(finalfinalexp,'W3_Thurs_Sun_Exp9.csv')
csvFile <- 'W4_Thurs_Sun_FullModel_P.csv'
data <- data.table(read.csv(csvFile))
result <- OptimizeFBLineup(data)
plot(result$FD.points,result$Scored.Labels)
plot(result$FD.salary,result$Scored.Labels)
plot(result$Rate.x,result$Scored.Labels)
plot(result$Yds,result$Scored.Labels)
plot(result$Yds,result$Scored.Labels, labels(result$Name))
plot(result$Yds,result$Scored.Labels, labels = result$Name)
plot(result$Yds,result$Scored.Labels,  labels = result$Name)
plot(result$Yds,result$Scored.Labels)
plot(result$Yds,result$Scored.Labels)
with(result, text(sr~dpi, labels = row.names(result), pos = 4))
dev.off()
plot(result$Yds,result$Scored.Labels, with(result, text(sr~dpi, labels = row.names(result), pos = 4)))
csvFile <- 'W4_Thurs_Mon_DF_P.csv'
data <- data.table(read.csv(csvFile))
result <- OptimizeFBLineup(data)
csvFile <- 'W4_Thurs_Mon_DF_P.csv'
data <- data.table(read.csv(csvFile))
View(data)
csvFile <- 'W4_Thurs_Mon_DF_P.csv'
data <- data.table(read.csv(csvFile))
csvFile <- 'W4_Thurs_Mon_DF_P.csv'
data <- data.table(read.csv(csvFile))
result <- OptimizeFBLineup(data)
result <- OptimizeFBLineup(data)
View(data)
data$Score
result <- OptimizeFBLineup(data)
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineup(data)
result <- OptimizeFBLineup(data)
final$Pos
Q
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineup(data)
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineup(data)
result <- OptimizeFBLineup(data)
Q
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineup(data)
sum(result$FD.salary)
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineupDFPredicted(data)
head(data)
head(data)
result <- OptimizeFBLineupDFPredicted(data)
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineupDFPredicted(data)
final$Pos
result <- OptimizeFBLineupDFPredicted(data)
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineupDFPredicted(data)
Q
#0) Get d
#2016 run pass and total defense
runD16 <- data.table(read.csv('2016RunD.txt',sep = "\t"))
passD16 <- data.table(read.csv('2016PassD.txt',sep = "\t"))
totalD16 <- data.table(read.csv('2016TotalD.txt',sep ="\t"))
runandpassandtotal2015[,"Year"] <- 2016
#setkey
#merge 2015 stats to one table
runandpass2016 <- merge(runD16,passD16,by="Team")
d <- merge(runandpass2016 ,totalD16,by="Team")
d[,"TeamID"] <- 0
d <- AssignTeamIDsDefense(d)
setkey(d,TeamID)
csvFile <- 'W4_Thurs_Mon_DF_P.csv'
data <- data.table(read.csv(csvFile))
names(data)[names(data)=="TeamID.x"] <- "TeamID"
result <- OptimizeFBLineupDFPredicted(data)
View(data)
result <- OptimizeFBLineupDFPredicted(data)
nrow(final)
View(final)
Q
result <- OptimizeFBLineupDFPredicted(data)
matrix
result <- OptimizeFBLineupDFPredicted(data)
result <- OptimizeFBLineupDFPredicted(data)
result <- OptimizeFBLineupDFPredicted(data)
final$Pos
Q
debugSource('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineupDFPredicted(data)
Q
result <- OptimizeFBLineupDFPredicted(data)
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
debugSource('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineupDFPredicted(data)
x$Pos
debugSource('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineupDFPredicted(data)
x1$Pos
x1
Q
csvFile <- 'W4_Thurs_Mon_DF_P.csv'
data <- data.table(read.csv(csvFile))
names(data)[names(data)=="TeamID.x"] <- "TeamID"
result <- OptimizeFBLineupDFPredicted(data)
x1
Q
result <- OptimizeFBLineupDFPredicted(data)
x1$Pos
Q
debugSource('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineupDFPredicted(data)
x1$Pos
num.players
result <- OptimizeFBLineupDFPredicted(data)
x1$GID
num.players
result <- OptimizeFBLineupDFPredicted(data)
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineupDFPredicted(data)
sum(result$FD.salary)
#0) Get d
#2016 run pass and total defense
runD16 <- data.table(read.csv('2016RunD.txt',sep = "\t"))
passD16 <- data.table(read.csv('2016PassD.txt',sep = "\t"))
totalD16 <- data.table(read.csv('2016TotalD.txt',sep ="\t"))
runandpassandtotal2015[,"Year"] <- 2016
#setkey
#merge 2015 stats to one table
runandpass2016 <- merge(runD16,passD16,by="Team")
d <- merge(runandpass2016 ,totalD16,by="Team")
d[,"TeamID"] <- 0
d <- AssignTeamIDsDefense(d)
setkey(d,TeamID)
#1) get offensive stats data which is called final
#2) merge the table with the Fanduel table
#3) merge with defensive stats data which is called
path <- 'C:/Users/Owner/Source/Repos/R/FantasyFootball/Fanduel/FanDuel-NFL-2016-09-29-16456-players-W4-Thurs-Sun-list.csv'
t <- data.table(read.csv(path,stringsAsFactors = FALSE))
# remove injured players
t <- t[which(t$Injury.Indicator == "")]
idData<- data.table(read.csv('RotoguruPlayerIds.csv',stringsAsFactors = FALSE))
input <- ConvertFanduelCSV(t,idData)
input[,"TeamID"] <- 0
experiment <- AssignTeamIDs(input)
#setkey(experiment,'TeamID')
setkey(final,Name,Week)
setkey(experiment,Name,Week)
finaltableexp <- merge(final,experiment,all.x = TRUE,allow.cartesian = TRUE)
names(finaltableexp)[names(finaltableexp)=="TeamID.x"] <- "TeamID"
setkey(finaltableexp,TeamID)
setkey(d,TeamID)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
#remove poistions that are NA
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
#Assign 0 to NAs
finalfinalexp[is.na(finalfinalexp)] <- 0
write.csv(finalfinalexp,'W3_Thurs_Sun_Exp10.csv')
UploadToMLStudio(finalfinalexp,'W3_Thurs_Sun_Exp10.csv')
path <- 'C:/Users/Owner/Source/Repos/R/FantasyFootball/Fanduel/FanDuel-NFL-2016-09-29-16456-players-W4-Thurs-Sun-list.csv'
t <- data.table(read.csv(path,stringsAsFactors = FALSE))
# remove injured players
t <- t[which(t$Injury.Indicator == "")]
idData<- data.table(read.csv('RotoguruPlayerIds.csv',stringsAsFactors = FALSE))
input <- ConvertFanduelCSV(t,idData)
input[,"TeamID"] <- 0
experiment <- AssignTeamIDs(input)
experiment
path <- 'C:/Users/Owner/Source/Repos/R/FantasyFootball/Fanduel/FanDuel-NFL-2016-09-29-16446-players-W4-Thurs-Mon-list.csv'
t <- data.table(read.csv(path,stringsAsFactors = FALSE))
# remove injured players
t <- t[which(t$Injury.Indicator == "")]
idData<- data.table(read.csv('RotoguruPlayerIds.csv',stringsAsFactors = FALSE))
input <- ConvertFanduelCSV(t,idData)
input[,"TeamID"] <- 0
experiment <- AssignTeamIDs(input)
#setkey(experiment,'TeamID')
setkey(final,Name,Week)
setkey(experiment,Name,Week)
finaltableexp <- merge(final,experiment,all.x = TRUE,allow.cartesian = TRUE)
names(finaltableexp)[names(finaltableexp)=="TeamID.x"] <- "TeamID"
setkey(finaltableexp,TeamID)
setkey(d,TeamID)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
#remove poistions that are NA
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
#Assign 0 to NAs
finalfinalexp[is.na(finalfinalexp)] <- 0
write.csv(finalfinalexp,'W3_Thurs_Mon_ExpDF.csv')
UploadToMLStudio(finalfinalexp,'W3_Thurs_Mon_ExpDF.csv')
csvFile <- 'W4_Thurs_Mon_DF_P.csv'
data <- data.table(read.csv(csvFile))
names(data)[names(data)=="TeamID.x"] <- "TeamID"
result <- OptimizeFBLineupDFPredicted(data)
data$Pos
csvFile <- 'W4_Thurs_Mon_DF_P.csv'
data <- data.table(read.csv(csvFile))
names(data)[names(data)=="TeamID.x"] <- "TeamID"
result <- OptimizeFBLineupDFPredicted(data)
sol
x1$Pos
debugSource('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineupDFPredicted(data)
Q
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/FFfunctions.R')
result <- OptimizeFBLineupDFPredicted(data)
path <- 'C:/Users/Owner/Source/Repos/R/FantasyFootball/Fanduel/FanDuel-NFL-2016-09-29-16456-players-W4-Thurs-Sun-list.csv'
t <- data.table(read.csv(path,stringsAsFactors = FALSE))
# remove injured players
t <- t[which(t$Injury.Indicator == "")]
idData<- data.table(read.csv('RotoguruPlayerIds.csv',stringsAsFactors = FALSE))
input <- ConvertFanduelCSV(t,idData)
input[,"TeamID"] <- 0
experiment <- AssignTeamIDs(input)
#setkey(experiment,'TeamID')
setkey(final,Name,Week)
setkey(experiment,Name,Week)
finaltableexp <- merge(final,experiment,all.x = TRUE,allow.cartesian = TRUE)
names(finaltableexp)[names(finaltableexp)=="TeamID.x"] <- "TeamID"
setkey(finaltableexp,TeamID)
setkey(d,TeamID)
finalfinalexp <- merge(finaltableexp,d,all.x = TRUE,allow.cartesian = TRUE)
#remove poistions that are NA
finalfinalexp <- finalfinalexp[which(!is.na(finalfinalexp$Pos))]
#Assign 0 to NAs
finalfinalexp[is.na(finalfinalexp)] <- 0
write.csv(finalfinalexp,'W3_Thurs_Sun_ExpDF.csv')
UploadToMLStudio(finalfinalexp,'W3_Thurs_Sun_ExpDF.csv')
csvFile <- 'W4_Thurs_Sun_DF_P.csv'
data <- data.table(read.csv(csvFile))
names(data)[names(data)=="TeamID.x"] <- "TeamID"
result <- OptimizeFBLineupDFPredicted(data)
csvFile <- 'W4_Thurs_Sun_BDT_P.csv'
data <- data.table(read.csv(csvFile))
names(data)[names(data)=="TeamID.x"] <- "TeamID"
result <- OptimizeFBLineupDFPredicted(data)
data <- data.table(read.csv(csvFile))
View(data)
result <- OptimizeFBLineupDFPredicted(data)
result <- OptimizeFBLineupDFPredicted(data)\
result <- OptimizeFBLineupDFPredicted(data)
x1$Pos
Q
result <- OptimizeFBLineup(data)
sum(result$Scored.Labels)
sum(result$FD.points)
Plot(result$Yds.G.x,result$Scored.Labels)
plot(result$Yds.G.x,result$Scored.Labels)
plot(result$Yds,result$Scored.Labels)
plot(result$Yds.x,result$Scored.Labels)
plot(result$Yds.y,result$Scored.Labels)
plot(result$Yds.G.y,result$Scored.Labels)
plot(result$Yds.P,result$Scored.Labels)
w1 <- read.csv('Week1.txt', sep = ';',stringsAsFactors = FALSE)
w2 <- read.csv('Week2.txt', sep = ';',stringsAsFactors = FALSE)
w3 <- read.csv('Week3.txt', sep = ';',stringsAsFactors = FALSE)
head(w1)
nrow(w1)
install.packages("TTR")
library(TTR)
w4$MA <- 'MA'
w4
