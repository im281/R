hdr = basicHeaderGatherer()
req =  list(
Inputs = list(
"Matchups"= list(
list(
'Column 0' = "1",
'TeamID' = "0",
'Week' = "3",
'Year.x' = "2016",
'GID' = "1412",
'Name' = "Wilson, Russell",
'Pos' = "QB",
'Team.x' = "SEA",
'h.a' = "t",
'Oppt' = "sf",
'FD.points' = "12.23999977",
'FD.salary' = "8700",
'Team.y' = "St. Louis Rams",
'Rk.x' = "20",
'G.x' = "16",
'Pts.G.x' = "20.6",
'TotPts.x' = "330",
'Att.x' = "453",
'Att.G.x' = "28.3",
'Yds.x' = "1820",
'Avg.x' = "4",
'Yds.G.x' = "113.8",
'TD.x' = "7",
'Lng.x' = "47",
'X1st.x' = "98",
'X1st..x' = "21.6",
'X20..x' = "15",
'X40..x' = "1",
'FUM.x' = "9",
'Rk.y' = "23",
'G.y' = "16",
'Pts.G.y' = "20.6",
'TotPts.y' = "330",
'Comp' = "399",
'Att.y' = "597",
'Pct' = "66.8",
'Att.G.y' = "37.3",
'Yds.y' = "4065",
'Avg.y' = "7.2",
'Yds.G.y' = "254.1",
'TD.y' = "21",
'Int' = "13",
'X1st.y' = "192",
'X1st..y' = "32.2",
'Lng.y' = "87T",
'X20..y' = "51",
'X40..y' = "8",
'Sck' = "41",
'Rate' = "90.4",
'k' = "23",
'G' = "16",
'Pts.G' = "206",
'TotPts' = "330",
'Scrm.Plys' = "1091",
'Yds.G' = "367.8",
'Yds.P' = "5.4",
'X1st.G' = "20",
'X3rd.Md' = "78",
'X3rd.Att' = "225",
'X3rd.Pct' = "35",
'X4th.Md' = "4",
'X4th.Att' = "15",
'X4th.Pct' = "27",
'Pen' = "109",
'Pen.Yds' = "992",
'ToP.G' = "33:12",
'FUM.y' = "28",
'Lost' = "13",
'Year.y' = "2016",
'Rk' = "NA"
)
)
),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "AhnRBj2yy2xn29t7MkxyKIdtviK6rEWKwbH3SK2G9oGP3v8l81IvWcjbxHlQKoThMDAHHwhBZwp0CQ9IbAb6FQ==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://management.azureml.net/workspaces/8dbb390855c44346b02db40767f19b60/webservices/d180bef31d0441808b2366aa1e892954/endpoints/default/execute?api-version=2.0&format=swagger",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
req
req[2]
req[1]
req[[1]]
req$Inputs$Matchups[2]
req$Inputs$Matchups[1]
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req =  list(
Inputs = list(
"Matchups"= list(
list(
'Column 0' = "1",
'TeamID' = "0",
'Week' = "3",
'Year.x' = "2016",
'GID' = "1412",
'Name' = "Wilson, Russell",
'Pos' = "QB",
'Team.x' = "SEA",
'h.a' = "t",
'Oppt' = "sf",
'FD.points' = "12.23999977",
'FD.salary' = "8700",
'Team.y' = "St. Louis Rams",
'Rk.x' = "20",
'G.x' = "16",
'Pts.G.x' = "20.6",
'TotPts.x' = "330",
'Att.x' = "453",
'Att.G.x' = "28.3",
'Yds.x' = "1820",
'Avg.x' = "4",
'Yds.G.x' = "113.8",
'TD.x' = "7",
'Lng.x' = "47",
'X1st.x' = "98",
'X1st..x' = "21.6",
'X20..x' = "15",
'X40..x' = "1",
'FUM.x' = "9",
'Rk.y' = "23",
'G.y' = "16",
'Pts.G.y' = "20.6",
'TotPts.y' = "330",
'Comp' = "399",
'Att.y' = "597",
'Pct' = "66.8",
'Att.G.y' = "37.3",
'Yds.y' = "4065",
'Avg.y' = "7.2",
'Yds.G.y' = "254.1",
'TD.y' = "21",
'Int' = "13",
'X1st.y' = "192",
'X1st..y' = "32.2",
'Lng.y' = "87T",
'X20..y' = "51",
'X40..y' = "8",
'Sck' = "41",
'Rate' = "90.4",
'k' = "23",
'G' = "16",
'Pts.G' = "206",
'TotPts' = "330",
'Scrm.Plys' = "1091",
'Yds.G' = "367.8",
'Yds.P' = "5.4",
'X1st.G' = "20",
'X3rd.Md' = "78",
'X3rd.Att' = "225",
'X3rd.Pct' = "35",
'X4th.Md' = "4",
'X4th.Att' = "15",
'X4th.Pct' = "27",
'Pen' = "109",
'Pen.Yds' = "992",
'ToP.G' = "33:12",
'FUM.y' = "28",
'Lost' = "13",
'Year.y' = "2016",
'Rk' = "NA"
)
)
),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "AhnRBj2yy2xn29t7MkxyKIdtviK6rEWKwbH3SK2G9oGP3v8l81IvWcjbxHlQKoThMDAHHwhBZwp0CQ9IbAb6FQ==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://management.azureml.net/workspaces/8dbb390855c44346b02db40767f19b60/webservices/d180bef31d0441808b2366aa1e892954/endpoints/default/execute?api-version=2.0&format=swagger",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"Matchups" = list(
"ColumnNames" = list("Column 0", "TeamID", "Week", "Year.x", "GID", "Name", "Pos", "Team.x", "h.a", "Oppt", "FD.points", "FD.salary", "Team.y", "Rk.x", "G.x", "Pts.G.x", "TotPts.x", "Att.x", "Att.G.x", "Yds.x", "Avg.x", "Yds.G.x", "TD.x", "Lng.x", "X1st.x", "X1st..x", "X20..x", "X40..x", "FUM.x", "Rk.y", "G.y", "Pts.G.y", "TotPts.y", "Comp", "Att.y", "Pct", "Att.G.y", "Yds.y", "Avg.y", "Yds.G.y", "TD.y", "Int", "X1st.y", "X1st..y", "Lng.y", "X20..y", "X40..y", "Sck", "Rate", "k", "G", "Pts.G", "TotPts", "Scrm.Plys", "Yds.G", "Yds.P", "X1st.G", "X3rd.Md", "X3rd.Att", "X3rd.Pct", "X4th.Md", "X4th.Att", "X4th.Pct", "Pen", "Pen.Yds", "ToP.G", "FUM.y", "Lost", "Year.y", "Rk"),
"Values" = list( list( "0", "0", "0", "0", "0", "value", "value", "value", "value", "value", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "value", "value" ),  list( "0", "0", "0", "0", "0", "value", "value", "value", "value", "value", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "value", "value" )  )
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "LfKcv781k71h84kKdmx5/sHLRvBSwr5npoQGwHKYJ92esnVZKY4QTU0FCLp6GcLmH87E1zZ5L7/SZ8zA+EP29A==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/8dbb390855c44346b02db40767f19b60/services/e36570f47d2e4ff5b039b6cf80209566/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req =  list(
Inputs = list(
"Matchups"= list(
list(
'Column 0' = "1",
'TeamID' = "0",
'Week' = "3",
'Year.x' = "2016",
'GID' = "1412",
'Name' = "Wilson, Russell",
'Pos' = "QB",
'Team.x' = "SEA",
'h.a' = "t",
'Oppt' = "sf",
'FD.points' = "12.23999977",
'FD.salary' = "8700",
'Team.y' = "St. Louis Rams",
'Rk.x' = "20",
'G.x' = "16",
'Pts.G.x' = "20.6",
'TotPts.x' = "330",
'Att.x' = "453",
'Att.G.x' = "28.3",
'Yds.x' = "1820",
'Avg.x' = "4",
'Yds.G.x' = "113.8",
'TD.x' = "7",
'Lng.x' = "47",
'X1st.x' = "98",
'X1st..x' = "21.6",
'X20..x' = "15",
'X40..x' = "1",
'FUM.x' = "9",
'Rk.y' = "23",
'G.y' = "16",
'Pts.G.y' = "20.6",
'TotPts.y' = "330",
'Comp' = "399",
'Att.y' = "597",
'Pct' = "66.8",
'Att.G.y' = "37.3",
'Yds.y' = "4065",
'Avg.y' = "7.2",
'Yds.G.y' = "254.1",
'TD.y' = "21",
'Int' = "13",
'X1st.y' = "192",
'X1st..y' = "32.2",
'Lng.y' = "87T",
'X20..y' = "51",
'X40..y' = "8",
'Sck' = "41",
'Rate' = "90.4",
'k' = "23",
'G' = "16",
'Pts.G' = "206",
'TotPts' = "330",
'Scrm.Plys' = "1091",
'Yds.G' = "367.8",
'Yds.P' = "5.4",
'X1st.G' = "20",
'X3rd.Md' = "78",
'X3rd.Att' = "225",
'X3rd.Pct' = "35",
'X4th.Md' = "4",
'X4th.Att' = "15",
'X4th.Pct' = "27",
'Pen' = "109",
'Pen.Yds' = "992",
'ToP.G' = "33:12",
'FUM.y' = "28",
'Lost' = "13",
'Year.y' = "2016",
'Rk' = "NA"
)
)
),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "LfKcv781k71h84kKdmx5/sHLRvBSwr5npoQGwHKYJ92esnVZKY4QTU0FCLp6GcLmH87E1zZ5L7/SZ8zA+EP29A==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/8dbb390855c44346b02db40767f19b60/services/e36570f47d2e4ff5b039b6cf80209566/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
inputs
nputs = list(
"Matchups" = list(
"ColumnNames" = list("Column 0", "TeamID", "Week", "Year.x", "GID", "Name", "Pos", "Team.x", "h.a", "Oppt", "FD.points", "FD.salary", "Team.y", "Rk.x", "G.x", "Pts.G.x", "TotPts.x", "Att.x", "Att.G.x", "Yds.x", "Avg.x", "Yds.G.x", "TD.x", "Lng.x", "X1st.x", "X1st..x", "X20..x", "X40..x", "FUM.x", "Rk.y", "G.y", "Pts.G.y", "TotPts.y", "Comp", "Att.y", "Pct", "Att.G.y", "Yds.y", "Avg.y", "Yds.G.y", "TD.y", "Int", "X1st.y", "X1st..y", "Lng.y", "X20..y", "X40..y", "Sck", "Rate", "k", "G", "Pts.G", "TotPts", "Scrm.Plys", "Yds.G", "Yds.P", "X1st.G", "X3rd.Md", "X3rd.Att", "X3rd.Pct", "X4th.Md", "X4th.Att", "X4th.Pct", "Pen", "Pen.Yds", "ToP.G", "FUM.y", "Lost", "Year.y", "Rk"),
"Values" = list( list( "0", "0", "0", "0", "0", "value", "value", "value", "value", "value", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "value", "value" ),  list( "0", "0", "0", "0", "0", "value", "value", "value", "value", "value", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "value", "value" )  )
)                )
Inputs = list(
"Matchups" = list(
"ColumnNames" = list("Column 0", "TeamID", "Week", "Year.x", "GID", "Name", "Pos", "Team.x", "h.a", "Oppt", "FD.points", "FD.salary", "Team.y", "Rk.x", "G.x", "Pts.G.x", "TotPts.x", "Att.x", "Att.G.x", "Yds.x", "Avg.x", "Yds.G.x", "TD.x", "Lng.x", "X1st.x", "X1st..x", "X20..x", "X40..x", "FUM.x", "Rk.y", "G.y", "Pts.G.y", "TotPts.y", "Comp", "Att.y", "Pct", "Att.G.y", "Yds.y", "Avg.y", "Yds.G.y", "TD.y", "Int", "X1st.y", "X1st..y", "Lng.y", "X20..y", "X40..y", "Sck", "Rate", "k", "G", "Pts.G", "TotPts", "Scrm.Plys", "Yds.G", "Yds.P", "X1st.G", "X3rd.Md", "X3rd.Att", "X3rd.Pct", "X4th.Md", "X4th.Att", "X4th.Pct", "Pen", "Pen.Yds", "ToP.G", "FUM.y", "Lost", "Year.y", "Rk"),
"Values" = list( list( "0", "0", "0", "0", "0", "value", "value", "value", "value", "value", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "value", "value" ),  list( "0", "0", "0", "0", "0", "value", "value", "value", "value", "value", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "value", "value" )  )
)                )
inputs
Inputs
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"Matchups" = list(
"ColumnNames" = list("Column 0", "TeamID", "Week", "Year.x", "GID", "Name", "Pos", "Team.x", "h.a", "Oppt", "FD.points", "FD.salary", "Team.y", "Rk.x", "G.x", "Pts.G.x", "TotPts.x", "Att.x", "Att.G.x", "Yds.x", "Avg.x", "Yds.G.x", "TD.x", "Lng.x", "X1st.x", "X1st..x", "X20..x", "X40..x", "FUM.x", "Rk.y", "G.y", "Pts.G.y", "TotPts.y", "Comp", "Att.y", "Pct", "Att.G.y", "Yds.y", "Avg.y", "Yds.G.y", "TD.y", "Int", "X1st.y", "X1st..y", "Lng.y", "X20..y", "X40..y", "Sck", "Rate", "k", "G", "Pts.G", "TotPts", "Scrm.Plys", "Yds.G", "Yds.P", "X1st.G", "X3rd.Md", "X3rd.Att", "X3rd.Pct", "X4th.Md", "X4th.Att", "X4th.Pct", "Pen", "Pen.Yds", "ToP.G", "FUM.y", "Lost", "Year.y", "Rk"),
"Values" = list( list( "0", "0", "0", "0", "0", "value", "value", "value", "value", "value", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "value", "value" ),  list( "0", "0", "0", "0", "0", "value", "value", "value", "value", "value", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "value", "0", "0", "value", "value" )  )
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "LfKcv781k71h84kKdmx5/sHLRvBSwr5npoQGwHKYJ92esnVZKY4QTU0FCLp6GcLmH87E1zZ5L7/SZ8zA+EP29A==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/8dbb390855c44346b02db40767f19b60/services/e36570f47d2e4ff5b039b6cf80209566/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
$Results
Results
result
t <- fromJSON(result)
t
class(t)
t[1]
t[1[1]]
str(t)
dt <- data.table(data.frame(matrix(unlist(fromJSON(result)), nrow=132, byrow=T),stringsAsFactors=FALSE))
dt <- data.table(data.frame(matrix(unlist(fromJSON(result)), nrow=214, byrow=T),stringsAsFactors=FALSE))
dt
View(dt)
t <- unlist(fromJSON(result)
t <- unlist(fromJSON(result))
unlist(fromJSON(result))
t <- unlist(fromJSON(result))
View(t)
t
View(t)
t <- data.table(unlist(fromJSON(result)))
View(t)
t <- as.data.table(fromJSON(result))
View(t)
class(t)
t
t[1]
t[[1]]
t[[1]]$Results
t$Results
t[[1][6]]
t[[1]]$Results
t[[1]]
t[43]
t[[43]]
[[1]]$value$Values[[1]]
t[[1]]$value$Values[[1]]
t[[1]]$value$Values[[1]]$Results
(result)
t <- fromJSON(result)
hdr
r
t
t[[1]]
class(t)
t[1]$Results
colmanes(l)
colnames(t)
colnames(t)
t[[2]]
t[[1]]
t[1]
t[1][2]
t[1][69]
$value$ColumnName
t[1$value$ColumnName
t[1]$value$ColumnName
t
View(t)
t[4,]
str(t)
str(t[[1]])
install.packages("rlist")
library(rlist)
library(RCurl)
library(rjson)
library(rlist)
test <- list.table(t)
x <- list(p1 = list(type='A',score=list(c1=10,c2=8)),
p2 = list(type='B',score=list(c1=9,c2=9)),
p3 = list(type='B',score=list(c1=9,c2=7)))
list.table(x, type)
list.table(x, type, c1 = score$c1)
list.table(x, type, score$c1, table.args = list(dnn=c('type','c1')))
x
str(x)
p1
x$p1
t$Results
str(t)
str(x)
t$Results$`FP Predictions`
t$Results$`FP Predictions`$value
t$Results$`FP Predictions`$value$Values
test <- data.table(t$Results$`FP Predictions`$value$Values)
View(test)
test <- data.table(ulist(t$Results$`FP Predictions`$value$Values))
test <- data.table(unlist(t$Results$`FP Predictions`$value$Values))
View(test)
v <- data.table(unlist(t$Results$`FP Predictions`$value$Values))
n <- data.table(unlist(t$Results$`FP Predictions`$value$ColumnNames))
r <- cbind(v,n)
View(r)
v <- data.table(t$Results$`FP Predictions`$value$Values)
View(v)
v <- data.table(unlist(t$Results$`FP Predictions`$value$Values))
View(v)
df <- data.frame(matrix(unlist(t$Results$`FP Predictions`$value$ColumnNames), nrow=132, byrow=T),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(t$Results$`FP Predictions`$value$ColumnNames), nrow=71, byrow=T),stringsAsFactors=FALSE)
View(df)
t$Results$`FP Predictions`$value$ColumnNames[1]
t$Results$`FP Predictions`$value$ColumnNames[5]
t(df)
View(df)
source('C:/Users/Owner/Source/Repos/R/FantasyFootball/MLStudio.R')
